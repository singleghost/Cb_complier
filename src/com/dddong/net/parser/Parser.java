/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
package com.dddong.net.parser;
import java.io.*;
import java.util.*;

import com.dddong.net.utils.*;
import com.dddong.net.ast.*;
import com.dddong.net.entity.*;
import com.dddong.net.exception.*;
import com.dddong.net.type.*;
import static com.dddong.net.utils.TextColor.*;

public class Parser implements ParserConstants {
    private String sourceName;
    private LibraryLoader loader;
    private ErrorHandler errorHandler;
    private Set<String> knownTypedefs;

    public Parser(Reader s, String name, LibraryLoader loader, ErrorHandler errorHandler, boolean debug) {
        this(s);
        this.sourceName = name;
        this.loader = loader;
        this.errorHandler = errorHandler;
        this.knownTypedefs = new HashSet<String>();
        if (debug) {
            enable_tracing();
        } else {
            disable_tracing();
        }
    }

    static public Declarations parseDeclFile(File file,
                                             LibraryLoader loader,
                                             ErrorHandler errorHandler)
                                             throws SyntaxException,
                                                    FileException {
        return parseDeclFile(file, loader, errorHandler, false);
    }

    static public Declarations parseDeclFile(File file,
                                             LibraryLoader loader,
                                             ErrorHandler errorHandler,
                                             boolean debug)
                                             throws SyntaxException,
                                                    FileException {
        return newFileParser(file, loader, errorHandler, debug).parseDecls();
    }



    static public AST parseFile(File file, LibraryLoader loader, ErrorHandler errorHandler, boolean debug)
                                throws SyntaxException, FileException {
                                    return newFileParser(file, loader, errorHandler, debug).parse();
                                }

    static final public String SOURCE_ENCODING = "UTF-8";

    static public Parser newFileParser(File file, LibraryLoader loader, ErrorHandler errorHandler, boolean debug)
                                        throws FileException
    {
        try {
            BufferedReader r = new BufferedReader(new InputStreamReader(new FileInputStream(file), SOURCE_ENCODING));
            return new Parser(r, file.getPath(), loader, errorHandler, debug);
        }
        catch (FileNotFoundException ex) {
            throw new FileException(ex.getMessage());
        }
        catch (UnsupportedEncodingException ex) {
            throw new Error("UTF-8 is not supported?: " + ex.getMessage());
        }
    }

    public AST parse() throws SyntaxException {
        try {
            return compilation_unit();
        }
        catch (TokenMgrError err) {
            throw new SyntaxException(err.getMessage());
        }
        catch (ParseException ex) {
            throw new SyntaxException(ex.getMessage());
        }
        catch (LookaheadSuccess err) {
            throw new SyntaxException("syntax error");
        }
    }

    public Declarations parseDecls() throws SyntaxException {
        try {
            return declaration_file();
        }
        catch (TokenMgrError ex) {
            throw new SyntaxException(ex.getMessage());
        }
        catch (ParseException ex) {
            throw new SyntaxException(ex.getMessage());
        }
    }

    private Location location(Token t) {
        return new Location(sourceName, t);
    }
    // #@@range/newReader{
    private IntegerLiteralNode integerNode(Location loc, String image) {
        long i = integerValue(image);
        if (image.endsWith("UL")) {
            return new IntegerLiteralNode(loc, IntegerTypeRef.ulongRef(loc), i);
        }
        else if (image.endsWith("L")) {
            return new IntegerLiteralNode(loc, IntegerTypeRef.longRef(loc), i);
        }
        else if (image.endsWith("U")) {
            return new IntegerLiteralNode(loc, IntegerTypeRef.uintRef(loc), i);
        }
        else {
            return new IntegerLiteralNode(loc, IntegerTypeRef.intRef(loc), i);
        }
    }
    // #@@}

    // #@@range/integerValue{
    private long integerValue(String image) {
        String s = image.replaceFirst("[UL]+", "");
        boolean isNegative = false;
        long result;
        if(s.startsWith("+")) {
            s = s.substring(1);
        } else if(s.startsWith("-")) {
            s = s.substring(1);
            isNegative = true;
        }
        if (s.startsWith("0x") || s.startsWith("0X")) {
            result = Long.parseLong(s.substring(2), 16);
            return isNegative ? -result : result;
        }
        else if (s.startsWith("0") && !s.equals("0")) {
            result = Long.parseLong(s.substring(1), 8);
            return isNegative ? -result : result;
        }
        else {
            result = Long.parseLong(s, 10);
            return isNegative ? -result : result;
        }
    }
    // #@@}

    // #@@range/characterCode{
    private long characterCode(String image) throws ParseException {
        String s = stringValue(image);
        if (s.length() != 1) {
            throw new Error("must not happen: character length > 1");
        }
        return (long)s.charAt(0);
    }
    // #@@}

    // #@@range/stringValue{
    private String stringValue(String _image) throws ParseException {
        int pos = 0;
        int idx;
        StringBuffer buf = new StringBuffer();
        String image = _image.substring(1, _image.length() - 1);    //去掉两边的引号

        while ((idx = image.indexOf("\u005c\u005c", pos)) >= 0) {
            buf.append(image.substring(pos, idx));
            if (image.length() >= idx + 4
                    && Character.isDigit(image.charAt(idx+1))
                    && Character.isDigit(image.charAt(idx+2))
                    && Character.isDigit(image.charAt(idx+3))) {
                buf.append(unescapeOctal(image.substring(idx+1, idx+4)));
                pos = idx + 4;
            }
            else {
                buf.append(unescapeSeq(image.charAt(idx+1)));
                pos = idx + 2;
            }
        }
        if (pos < image.length()) {
            buf.append(image.substring(pos, image.length()));
        }
        return buf.toString();
    }

    static final int charMax = 255;
    private char unescapeOctal(String digits) throws ParseException {
        int i = Integer.parseInt(digits, 8);
        if (i > charMax) {
            throw new ParseException("incorrect octal escape, exceeds the upper bound of char");
        }
        return (char)i;
    }
    // #@@}

    private static final char bell = 7;
    private static final char backspace = 8;
    private static final char escape = 27;
    private static final char vt = 11;

    private char unescapeSeq(char c) throws ParseException {
        switch (c) {
            case '0': return '\u005c0';
            case '"': return '"';
            case '\u005c'': return '\u005c'';
            case 'a': return bell;
            case 'b': return backspace;
            case 'e': return escape;
            case 'f': return '\u005cf';
            case 'n': return '\u005cn';
            case 'r': return '\u005cr';
            case 't': return '\u005ct';
            case 'v': return vt;
            case '\u005c\u005c': return '\u005c\u005c';
            default:
                throw new ParseException("unknown escape sequence: \u005c"\u005c\u005c" + c);
        }
    }

    private IntegerTypeRef typeOf_sizeof() {
        return IntegerTypeRef.ulongRef();
    }

//用户定义的类型
    void addKnownTypedefs(List<TypedefNode> typedefs) {
        for(TypedefNode typedef : typedefs) {
            addType(typedef.name());
        }
    }

    void addType(String name) {
        knownTypedefs.add(name);
    }

    boolean isType(String name) {
        return knownTypedefs.contains(name);
    }

  final public AST compilation_unit() throws ParseException {Token t;
    Declarations impdecls, decls;
t = getToken(1);
    impdecls = import_stmts();
    decls = top_defs();
    jj_consume_token(0);
decls.add(impdecls);
        {if ("" != null) return new AST(location(t), decls);}
    throw new Error("Missing return statement in function");
  }

  final public Declarations declaration_file() throws ParseException {Declarations impdecls, decls = new Declarations();
    UndefinedFunction undefinedFunc;
    UndefinedVariable undefinedVar;
    UnionNode unionNode;
    StructNode structNode;
    Constant constant;
    TypedefNode typedefNode;
    impdecls = import_stmts();
decls.add(impdecls);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRUCT:
      case UNION:
      case EXTERN:
      case CONST:
      case TYPEDEF:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      if (jj_2_1(2147483647)) {
        undefinedFunc = funcdecl();
decls.addFuncdecl(undefinedFunc);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EXTERN:{
          undefinedVar = vardecl();
decls.addVardecl(undefinedVar);
          break;
          }
        case UNION:{
          unionNode = defunion();
decls.addDefunion(unionNode);
          break;
          }
        case STRUCT:{
          structNode = defstruct();
decls.addDefstruct(structNode);
          break;
          }
        case CONST:{
          constant = defconst();
decls.addConstant(constant);
          break;
          }
        case TYPEDEF:{
          typedefNode = typedef();
decls.addTypedef(typedefNode);
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
{if ("" != null) return decls;}
    throw new Error("Missing return statement in function");
  }

  final public UndefinedVariable vardecl() throws ParseException {TypeNode type;
    String name;
    jj_consume_token(EXTERN);
    type = type();
    name = name();
    jj_consume_token(46);
{if ("" != null) return new UndefinedVariable(type, name);}
    throw new Error("Missing return statement in function");
  }

  final public UndefinedFunction funcdecl() throws ParseException {TypeRef ret;
    String name;
    Params params;
    jj_consume_token(EXTERN);
    ret = typeref();
    name = name();
    jj_consume_token(45);
    params = params();
    jj_consume_token(47);
    jj_consume_token(46);
FunctionTypeRef funcTypeRef = new FunctionTypeRef(ret, params.parametersTypeRef());
        {if ("" != null) return new UndefinedFunction(false, new TypeNode(funcTypeRef), name, params);}
    throw new Error("Missing return statement in function");
  }

  final public Declarations import_stmts() throws ParseException {String libid;
    Declarations impdecls = new Declarations();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPORT:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      libid = import_stmt();
try {
            Declarations decls = loader.loadLibrary(libid, errorHandler);
            if (decls != null) {
                impdecls.add(decls);
                addKnownTypedefs(decls.typedefs());
            }
        }
        catch (CompileException ex) {
            {if (true) throw new ParseException(ex.getMessage());}
        }
    }
{if ("" != null) return impdecls;}
    throw new Error("Missing return statement in function");
  }

  final public String import_stmt() throws ParseException {StringBuffer libname = new StringBuffer();
    String partname;
    jj_consume_token(IMPORT);
    partname = name();
libname.append(partname);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 48:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(48);
      partname = name();
libname.append("/" + partname);
    }
    jj_consume_token(46);
{if ("" != null) return libname.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String name() throws ParseException {Token tok;
    tok = jj_consume_token(IDENTIFIER);
{if ("" != null) return tok.image;}
    throw new Error("Missing return statement in function");
  }

  final public Declarations top_defs() throws ParseException {Declarations decls = new Declarations();
    DefinedFunction defun;
    List<DefinedVariable> defvars;
    Constant defconst;
    StructNode defstruct;
    UnionNode defunion;
    TypedefNode typedef;
    label_4:
    while (true) {
      if (jj_2_2(1)) {
        ;
      } else {
        break label_4;
      }
      if (jj_2_3(2147483647)) {
        defun = defun();
decls.addDefun(defun);
      } else if (jj_2_4(3)) {
        defvars = defvars();
decls.addDefvars(defvars);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CONST:{
          defconst = defconst();
decls.addConstant(defconst);
          break;
          }
        case STRUCT:{
          defstruct = defstruct();
decls.addDefstruct(defstruct);
          break;
          }
        case UNION:{
          defunion = defunion();
decls.addDefunion(defunion);
          break;
          }
        case TYPEDEF:{
          typedef = typedef();
decls.addTypedef(typedef);
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
{if ("" != null) return decls;}
    throw new Error("Missing return statement in function");
  }

// 定义变量
  final public List<DefinedVariable> defvars() throws ParseException {List<DefinedVariable> defs = new ArrayList<DefinedVariable>();
    boolean priv;
    TypeNode type;
    String name;
    ExprNode init = null;
    priv = storage();
    type = type();
    name = name();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 49:{
      jj_consume_token(49);
      init = expr();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
defs.add(new DefinedVariable(priv, type, name, init));
        init = null;
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 50:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_5;
      }
      jj_consume_token(50);
      name = name();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 49:{
        jj_consume_token(49);
        init = expr();
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
defs.add(new DefinedVariable(priv, type, name, init));
    }
    jj_consume_token(46);
{if ("" != null) return defs;}
    throw new Error("Missing return statement in function");
  }

  final public boolean storage() throws ParseException {boolean priv = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STATIC:{
      jj_consume_token(STATIC);
priv = true;
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
{if ("" != null) return priv;}
    throw new Error("Missing return statement in function");
  }

/* 定义函数部分 */
  final public DefinedFunction defun() throws ParseException {boolean priv;
    TypeRef ret;
    String n;
    Params ps;
    BlockNode body;
    priv = storage();
    ret = typeref();
    n = name();
    jj_consume_token(45);
    ps = params();
    jj_consume_token(47);
    body = body();
TypeRef t = new FunctionTypeRef(ret, ps.parametersTypeRef());
        {if ("" != null) return new DefinedFunction(priv, new TypeNode(t), n, ps, body);}
    throw new Error("Missing return statement in function");
  }

  final public Constant defconst() throws ParseException {TypeNode type;
    String name;
    ExprNode value;
    jj_consume_token(CONST);
    type = type();
    name = name();
    jj_consume_token(49);
    value = expr();
    jj_consume_token(46);
{if ("" != null) return new Constant(type, name, value);}
    throw new Error("Missing return statement in function");
  }

  final public Params params() throws ParseException {Token t;
    List<CBCParameter> cbcParams = new ArrayList<CBCParameter>();
    Params params;
    if (jj_2_5(2147483647)) {
      t = jj_consume_token(VOID);
params = new Params(location(t), new ArrayList<CBCParameter>());
        {if ("" != null) return params;}
    } else if (jj_2_6(1)) {
      params = fixedparams();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 50:{
        jj_consume_token(50);
        jj_consume_token(51);
params.acceptVarargs();
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        ;
      }
{if ("" != null) return params;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Params fixedparams() throws ParseException {TypeNode typenode;
    String name;
    List<CBCParameter> cbcParams = new ArrayList<CBCParameter>();
    Location loc;
    typenode = type();
    name = name();
loc = typenode.location();
        cbcParams.add(new CBCParameter(typenode, name));
    label_6:
    while (true) {
      if (jj_2_7(2)) {
        ;
      } else {
        break label_6;
      }
      jj_consume_token(50);
      typenode = type();
      name = name();
cbcParams.add(new CBCParameter(typenode, name));
    }
{if ("" != null) return new Params(loc, cbcParams);}
    throw new Error("Missing return statement in function");
  }

  final public StructNode defstruct() throws ParseException {Token t;
        String n;
        List<Slot> membs;
        String str;
    t = jj_consume_token(STRUCT);
    n = name();
    membs = member_list();
    jj_consume_token(46);
{if ("" != null) return new StructNode(location(t), new StructTypeRef(location(t), n), n, membs);}
    throw new Error("Missing return statement in function");
  }

  final public UnionNode defunion() throws ParseException {Token t;
    String name;
    List<Slot> slots;
    t = jj_consume_token(UNION);
    name = name();
    slots = member_list();
    jj_consume_token(46);
{if ("" != null) return new UnionNode(location(t), new UnionTypeRef(location(t), name), name, slots);}
    throw new Error("Missing return statement in function");
  }

  final public List<Slot> member_list() throws ParseException {List<Slot> slots = new ArrayList<Slot>();
    Slot slot;
    jj_consume_token(52);
    label_7:
    while (true) {
      if (jj_2_8(1)) {
        ;
      } else {
        break label_7;
      }
      slot = slot();
      jj_consume_token(46);
slots.add(slot);
    }
    jj_consume_token(53);
{if ("" != null) return slots;}
    throw new Error("Missing return statement in function");
  }

  final public Slot slot() throws ParseException {TypeNode typenode;
    String name;
    typenode = type();
    name = name();
{if ("" != null) return new Slot(typenode, name);}
    throw new Error("Missing return statement in function");
  }

  final public TypedefNode typedef() throws ParseException {String name;
    TypeRef typeref;
    Token t;
    t = jj_consume_token(TYPEDEF);
    typeref = typeref();
    name = name();
    jj_consume_token(46);
addType(name);
        {if ("" != null) return new TypedefNode(location(t), typeref, name);}
    throw new Error("Missing return statement in function");
  }

  final public TypeNode type() throws ParseException {TypeRef typeref;
    typeref = typeref();
{if ("" != null) return new TypeNode(typeref);}
    throw new Error("Missing return statement in function");
  }

  final public TypeRef typeref() throws ParseException {Token t;
    TypeRef baseType;
    ParamTypeRefs param_typerefs;
    baseType = typeref_base();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 45:
      case 54:
      case 56:{
        ;
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_8;
      }
      if (jj_2_9(2)) {
        jj_consume_token(54);
        jj_consume_token(55);
baseType = new ArrayTypeRef(baseType);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 54:{
          jj_consume_token(54);
          t = jj_consume_token(INTEGER);
          jj_consume_token(55);
baseType = new ArrayTypeRef(baseType, integerValue(t.image));
          break;
          }
        case 56:{
          jj_consume_token(56);
baseType = new PointerTypeRef(baseType);
          break;
          }
        case 45:{
          jj_consume_token(45);
          param_typerefs = param_typerefs();
          jj_consume_token(47);
baseType = new FunctionTypeRef(baseType, param_typerefs);
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
{if ("" != null) return baseType;}
    throw new Error("Missing return statement in function");
  }

  final public TypeRef typeref_base() throws ParseException {Token t;
    Token t2;
    TypeRef baseType;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VOID:{
      t = jj_consume_token(VOID);
baseType = new VoidTypeRef(location(t));
      break;
      }
    case CHAR:{
      t = jj_consume_token(CHAR);
baseType = IntegerTypeRef.charRef(location(t));
      break;
      }
    case SHORT:{
      t = jj_consume_token(SHORT);
baseType = IntegerTypeRef.shortRef(location(t));
      break;
      }
    case INT:{
      t = jj_consume_token(INT);
baseType = IntegerTypeRef.intRef(location(t));
      break;
      }
    case LONG:{
      t = jj_consume_token(LONG);
baseType = IntegerTypeRef.longRef(location(t));
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      if (jj_2_10(2)) {
        t = jj_consume_token(UNSIGNED);
        jj_consume_token(CHAR);
baseType = IntegerTypeRef.ucharRef(location(t));
      } else if (jj_2_11(2)) {
        t = jj_consume_token(UNSIGNED);
        jj_consume_token(SHORT);
baseType = IntegerTypeRef.ushortRef(location(t));
      } else if (jj_2_12(2)) {
        t = jj_consume_token(UNSIGNED);
        jj_consume_token(INT);
baseType = IntegerTypeRef.uintRef(location(t));
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case UNSIGNED:{
          t = jj_consume_token(UNSIGNED);
          jj_consume_token(LONG);
baseType = IntegerTypeRef.ulongRef(location(t));
          break;
          }
        case STRUCT:{
          t2 = jj_consume_token(STRUCT);
          t = jj_consume_token(IDENTIFIER);
baseType = new StructTypeRef(location(t2), t.image);
          break;
          }
        case UNION:{
          t2 = jj_consume_token(UNION);
          t = jj_consume_token(IDENTIFIER);
baseType = new UnionTypeRef(location(t2), t.image);
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          if (isType(getToken(1).image)) {
            t = jj_consume_token(IDENTIFIER);
baseType = new UserTypeRef(location(t), t.image);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
{if ("" != null) return baseType;}
    throw new Error("Missing return statement in function");
  }

  final public ParamTypeRefs param_typerefs() throws ParseException {Token t;
    ParamTypeRefs params;
    if (jj_2_13(2147483647)) {
      jj_consume_token(VOID);
{if ("" != null) return new ParamTypeRefs(new ArrayList<TypeRef>());}
    } else if (jj_2_14(1)) {
      params = fixedparam_typerefs();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 50:{
        jj_consume_token(50);
        jj_consume_token(51);
params.acceptVarargs();
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        ;
      }
{if ("" != null) return params;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ParamTypeRefs fixedparam_typerefs() throws ParseException {List<TypeRef> typerefs = new ArrayList<TypeRef>();
    TypeRef tr;
    Location loc;
    tr = typeref();
loc = tr.location(); typerefs.add(tr);
    label_9:
    while (true) {
      if (jj_2_15(2)) {
        ;
      } else {
        break label_9;
      }
      jj_consume_token(50);
      tr = typeref();
typerefs.add(tr);
    }
{if ("" != null) return new ParamTypeRefs(loc, typerefs, false);}
    throw new Error("Missing return statement in function");
  }

  final public List<DefinedVariable> defvar_list() throws ParseException {List<DefinedVariable> result = new ArrayList<DefinedVariable>();
    List<DefinedVariable> vars;
    label_10:
    while (true) {
      if (jj_2_16(1)) {
        ;
      } else {
        break label_10;
      }
      vars = defvars();
result.addAll(vars);
    }
{if ("" != null) return result;}
    throw new Error("Missing return statement in function");
  }

  final public List<StmtNode> stmts() throws ParseException {List<StmtNode> ss = new ArrayList<StmtNode>();
    StmtNode s;
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING:
      case CHARACTER:
      case IF:
      case SWITCH:
      case WHILE:
      case DO:
      case FOR:
      case RETURN:
      case BREAK:
      case CONTINUE:
      case GOTO:
      case SIZEOF:
      case INTEGER:
      case IDENTIFIER:
      case 45:
      case 46:
      case 52:
      case 56:
      case 79:
      case 82:
      case 83:
      case 86:
      case 87:
      case 88:
      case 89:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_11;
      }
      s = stmt();
if (s != null) ss.add(s);
    }
{if ("" != null) return ss;}
    throw new Error("Missing return statement in function");
  }

  final public StmtNode stmt() throws ParseException {StmtNode stmt = null;
    ExprNode expr;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 46:{
      jj_consume_token(46);
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      if (jj_2_17(2)) {
        stmt = labeled_stmt();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:
        case CHARACTER:
        case SIZEOF:
        case INTEGER:
        case IDENTIFIER:
        case 45:
        case 56:
        case 79:
        case 82:
        case 83:
        case 86:
        case 87:
        case 88:
        case 89:{
          expr = expr();
          jj_consume_token(46);
stmt = new ExprStmtNode(expr.location(), expr);
          break;
          }
        case 52:{
          stmt = body();
          break;
          }
        case IF:{
          stmt = if_stmt();
          break;
          }
        case WHILE:{
          stmt = while_stmt();
          break;
          }
        case DO:{
          stmt = dowhile_stmt();
          break;
          }
        case FOR:{
          stmt = for_stmt();
          break;
          }
        case SWITCH:{
          stmt = switch_stmt();
          break;
          }
        case BREAK:{
          stmt = break_stmt();
          break;
          }
        case CONTINUE:{
          stmt = continue_stmt();
          break;
          }
        case GOTO:{
          stmt = goto_stmt();
          break;
          }
        case RETURN:{
          stmt = return_stmt();
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
{if ("" != null) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public LabelNode labeled_stmt() throws ParseException {Token t;
    String label;
    StmtNode stmt;
t = getToken(1);
    label = label();
    jj_consume_token(57);
    stmt = stmt();
{if ("" != null) return new LabelNode(location(t), label, stmt);}
    throw new Error("Missing return statement in function");
  }

  final public String label() throws ParseException {Token t;
    t = jj_consume_token(IDENTIFIER);
{if ("" != null) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public BlockNode body() throws ParseException {Token t;
    List<DefinedVariable> vars;
    List<StmtNode> stmts;
    t = jj_consume_token(52);
    vars = defvar_list();
    stmts = stmts();
    jj_consume_token(53);
{if ("" != null) return new BlockNode(location(t), vars, stmts);}
    throw new Error("Missing return statement in function");
  }

  final public DoWhileNode dowhile_stmt() throws ParseException {Token t;
    BlockNode body;
    ExprNode expr;
    t = jj_consume_token(DO);
    body = body();
    jj_consume_token(WHILE);
    jj_consume_token(45);
    expr = expr();
    jj_consume_token(47);
{if ("" != null) return new DoWhileNode(location(t), body, expr);}
    throw new Error("Missing return statement in function");
  }

  final public SwitchNode switch_stmt() throws ParseException {ExprNode switchExpr;
    List<CaseNode> caseNodeList;
    Token t;
    t = jj_consume_token(SWITCH);
    jj_consume_token(45);
    switchExpr = expr();
    jj_consume_token(47);
    jj_consume_token(52);
    caseNodeList = switch_body();
    jj_consume_token(53);
{if ("" != null) return new SwitchNode(location(t), switchExpr, caseNodeList);}
    throw new Error("Missing return statement in function");
  }

  final public List<CaseNode> switch_body() throws ParseException {CaseNode caseNode;
    List<CaseNode> caseNodeList = new ArrayList<CaseNode>();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CASE:{
        ;
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        break label_12;
      }
      caseNode = case_clause();
caseNodeList.add(caseNode);
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DEFAULT_:{
      caseNode = default_clause();
caseNodeList.add(caseNode);
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      ;
    }
{if ("" != null) return caseNodeList;}
    throw new Error("Missing return statement in function");
  }

  final public CaseNode case_clause() throws ParseException {ExprNode expr;
    List<ExprNode> caseExprs = new ArrayList<ExprNode>();
    LinkedList<StmtNode> stmts = new LinkedList<StmtNode>();
    StmtNode stmt;
    label_13:
    while (true) {
      expr = case_item();
caseExprs.add(expr);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CASE:{
        ;
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        break label_13;
      }
    }
    label_14:
    while (true) {
      stmt = stmt();
if (stmt != null) stmts.add(stmt);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING:
      case CHARACTER:
      case IF:
      case SWITCH:
      case WHILE:
      case DO:
      case FOR:
      case RETURN:
      case BREAK:
      case CONTINUE:
      case GOTO:
      case SIZEOF:
      case INTEGER:
      case IDENTIFIER:
      case 45:
      case 46:
      case 52:
      case 56:
      case 79:
      case 82:
      case 83:
      case 86:
      case 87:
      case 88:
      case 89:{
        ;
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        break label_14;
      }
    }
if (!(stmts.getLast() instanceof BreakNode)) {
            {if (true) throw new ParseException("missing break statement at the last of case clause");}
        }
        {if ("" != null) return new CaseNode(caseExprs.get(0).location(), caseExprs, new BlockNode(stmts.get(0).location(),
                            new ArrayList<DefinedVariable>(),stmts));}
    throw new Error("Missing return statement in function");
  }

  final public ExprNode case_item() throws ParseException {ExprNode expr;
    jj_consume_token(CASE);
    expr = expr();
    jj_consume_token(57);
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public CaseNode default_clause() throws ParseException {Token t;
    List<StmtNode> stmts;
    t = jj_consume_token(DEFAULT_);
    jj_consume_token(57);
    stmts = stmts();
{if ("" != null) return new CaseNode(location(t), new ArrayList<ExprNode>(), new BlockNode(stmts.get(0).location(),
                            new ArrayList<DefinedVariable>(), stmts));}
    throw new Error("Missing return statement in function");
  }

//switch 语句相关的结束
  final public ContinueNode continue_stmt() throws ParseException {Token t;
    t = jj_consume_token(CONTINUE);
    jj_consume_token(46);
{if ("" != null) return new ContinueNode(location(t));}
    throw new Error("Missing return statement in function");
  }

  final public GotoNode goto_stmt() throws ParseException {Token t;
    String labelName;
    t = jj_consume_token(GOTO);
    labelName = label();
    jj_consume_token(46);
{if ("" != null) return new GotoNode(location(t), labelName);}
    throw new Error("Missing return statement in function");
  }

//if 语句，lookahead 是为了解决空悬 else 的问题，else 属于最近的 if 语句
  final public IfNode if_stmt() throws ParseException {Token t;
    ExprNode cond;
    StmtNode thenBody, elseBody = null;
    t = jj_consume_token(IF);
    jj_consume_token(45);
    cond = expr();
    jj_consume_token(47);
    thenBody = stmt();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      elseBody = stmt();
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      ;
    }
{if ("" != null) return new IfNode(location(t), cond, thenBody, elseBody);}
    throw new Error("Missing return statement in function");
  }

  final public WhileNode while_stmt() throws ParseException {Token t;
    ExprNode cond;
    StmtNode body;
    t = jj_consume_token(WHILE);
    jj_consume_token(45);
    cond = expr();
    jj_consume_token(47);
    body = stmt();
{if ("" != null) return new WhileNode(location(t), cond, body);}
    throw new Error("Missing return statement in function");
  }

  final public ForNode for_stmt() throws ParseException {Token t;
    ExprNode init = null, cond = null, action = null;
    StmtNode bodyStmt;
    t = jj_consume_token(FOR);
    jj_consume_token(45);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING:
    case CHARACTER:
    case SIZEOF:
    case INTEGER:
    case IDENTIFIER:
    case 45:
    case 56:
    case 79:
    case 82:
    case 83:
    case 86:
    case 87:
    case 88:
    case 89:{
      init = expr();
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    jj_consume_token(46);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING:
    case CHARACTER:
    case SIZEOF:
    case INTEGER:
    case IDENTIFIER:
    case 45:
    case 56:
    case 79:
    case 82:
    case 83:
    case 86:
    case 87:
    case 88:
    case 89:{
      cond = expr();
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    jj_consume_token(46);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING:
    case CHARACTER:
    case SIZEOF:
    case INTEGER:
    case IDENTIFIER:
    case 45:
    case 56:
    case 79:
    case 82:
    case 83:
    case 86:
    case 87:
    case 88:
    case 89:{
      action = expr();
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    jj_consume_token(47);
    bodyStmt = stmt();
{if ("" != null) return new ForNode(location(t), init, cond, action, bodyStmt);}
    throw new Error("Missing return statement in function");
  }

  final public BreakNode break_stmt() throws ParseException {Token t;
    t = jj_consume_token(BREAK);
    jj_consume_token(46);
{if ("" != null) return new BreakNode(location(t));}
    throw new Error("Missing return statement in function");
  }

  final public ReturnNode return_stmt() throws ParseException {Token t;
    ExprNode retValueExpr = null;
    if (jj_2_18(2)) {
      t = jj_consume_token(RETURN);
      jj_consume_token(46);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RETURN:{
        t = jj_consume_token(RETURN);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING:
        case CHARACTER:
        case SIZEOF:
        case INTEGER:
        case IDENTIFIER:
        case 45:
        case 56:
        case 79:
        case 82:
        case 83:
        case 86:
        case 87:
        case 88:
        case 89:{
          retValueExpr = expr();
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          ;
        }
        jj_consume_token(46);
{if ("" != null) return new ReturnNode(location(t), retValueExpr);}
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ExprNode expr() throws ParseException {ExprNode lhs, rhs, expr;
    String op;
    if (jj_2_19(2147483647)) {
      lhs = term();
      jj_consume_token(49);
      rhs = expr();
{if ("" != null) return new AssignNode(lhs, rhs);}
    } else if (jj_2_20(2147483647)) {
      lhs = term();
      op = opassign_op();
      rhs = expr();
{if ("" != null) return new OpAssignNode(lhs, op, rhs);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING:
      case CHARACTER:
      case SIZEOF:
      case INTEGER:
      case IDENTIFIER:
      case 45:
      case 56:
      case 79:
      case 82:
      case 83:
      case 86:
      case 87:
      case 88:
      case 89:{
        expr = expr10();
{if ("" != null) return expr;}
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String opassign_op() throws ParseException {Token tok;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 58:{
      tok = jj_consume_token(58);
{if ("" != null) return "+";}
      break;
      }
    case 59:{
      tok = jj_consume_token(59);
{if ("" != null) return "-";}
      break;
      }
    case 60:{
      tok = jj_consume_token(60);
{if ("" != null) return "*";}
      break;
      }
    case 61:{
      tok = jj_consume_token(61);
{if ("" != null) return "/";}
      break;
      }
    case 62:{
      tok = jj_consume_token(62);
{if ("" != null) return "%";}
      break;
      }
    case 63:{
      tok = jj_consume_token(63);
{if ("" != null) return "&";}
      break;
      }
    case 64:{
      tok = jj_consume_token(64);
{if ("" != null) return "|";}
      break;
      }
    case 65:{
      tok = jj_consume_token(65);
{if ("" != null) return "^";}
      break;
      }
    case 66:{
      tok = jj_consume_token(66);
{if ("" != null) return "<<";}
      break;
      }
    case 67:{
      tok = jj_consume_token(67);
{if ("" != null) return ">>";}
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ExprNode expr10() throws ParseException {ExprNode c, t, e;
    c = expr9();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 68:{
      jj_consume_token(68);
      t = expr();
      jj_consume_token(57);
      e = expr10();
{if ("" != null) return new CondExprNode(c, t, e);}
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      ;
    }
{if ("" != null) return c;}
    throw new Error("Missing return statement in function");
  }

  final public ExprNode expr9() throws ParseException {ExprNode l, r;
    l = expr8();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 69:{
        ;
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        break label_15;
      }
      jj_consume_token(69);
      r = expr8();
l = new LogicalOrNode(l, r);
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
  }

  final public ExprNode expr8() throws ParseException {ExprNode l, r;
    l = expr7();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 70:{
        ;
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        break label_16;
      }
      jj_consume_token(70);
      r = expr7();
l = new LogicalAndNode(l, r);
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
  }

  final public ExprNode expr7() throws ParseException {ExprNode l, r;
    l = expr6();
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:{
        ;
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        break label_17;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 71:{
        jj_consume_token(71);
        r = expr6();
l = new BinaryOpNode(l, ">", r);
        break;
        }
      case 72:{
        jj_consume_token(72);
        r = expr6();
l = new BinaryOpNode(l, "<", r);
        break;
        }
      case 73:{
        jj_consume_token(73);
        r = expr6();
l = new BinaryOpNode(l, ">=", r);
        break;
        }
      case 74:{
        jj_consume_token(74);
        r = expr6();
l = new BinaryOpNode(l, "<=", r);
        break;
        }
      case 75:{
        jj_consume_token(75);
        r = expr6();
l = new BinaryOpNode(l, "==", r);
        break;
        }
      case 76:{
        jj_consume_token(76);
        r = expr6();
l = new BinaryOpNode(l, "!=", r);
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
  }

  final public ExprNode expr6() throws ParseException {ExprNode l, r;
    l = expr5();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 77:{
        ;
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        break label_18;
      }
      jj_consume_token(77);
      r = expr5();
l = new BinaryOpNode(l, "|", r);
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
  }

  final public ExprNode expr5() throws ParseException {ExprNode l, r;
    l = expr4();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 78:{
        ;
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        break label_19;
      }
      jj_consume_token(78);
      r = expr4();
l = new BinaryOpNode(l, "^", r);
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
  }

  final public ExprNode expr4() throws ParseException {ExprNode l, r;
    l = expr3();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 79:{
        ;
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        break label_20;
      }
      jj_consume_token(79);
      r = expr3();
l = new BinaryOpNode(l, "&", r);
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
  }

  final public ExprNode expr3() throws ParseException {ExprNode l, r;
    l = expr2();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 80:
      case 81:{
        ;
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        break label_21;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 80:{
        jj_consume_token(80);
        r = expr2();
l = new BinaryOpNode(l, ">>", r);
        break;
        }
      case 81:{
        jj_consume_token(81);
        r = expr2();
l = new BinaryOpNode(l, "<<", r);
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
  }

  final public ExprNode expr2() throws ParseException {ExprNode l, r;
    l = expr1();
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 82:
      case 83:{
        ;
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        break label_22;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 82:{
        jj_consume_token(82);
        r = expr1();
l = new BinaryOpNode(l, "+", r);
        break;
        }
      case 83:{
        jj_consume_token(83);
        r = expr1();
l = new BinaryOpNode(l, "-", r);
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
  }

  final public ExprNode expr1() throws ParseException {ExprNode l, r;
    l = term();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 56:
      case 84:
      case 85:{
        ;
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        break label_23;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 56:{
        jj_consume_token(56);
        r = term();
l = new BinaryOpNode(l, "*", r);
        break;
        }
      case 84:{
        jj_consume_token(84);
        r = term();
l = new BinaryOpNode(l, "/", r);
        break;
        }
      case 85:{
        jj_consume_token(85);
        r = term();
l = new BinaryOpNode(l, "%", r);
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return l;}
    throw new Error("Missing return statement in function");
  }

  final public ExprNode term() throws ParseException {TypeNode t;
    ExprNode n;
    if (jj_2_21(2147483647)) {
      jj_consume_token(45);
      t = type();
      jj_consume_token(47);
      n = term();
{if ("" != null) return new CastNode(t, n);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING:
      case CHARACTER:
      case SIZEOF:
      case INTEGER:
      case IDENTIFIER:
      case 45:
      case 56:
      case 79:
      case 82:
      case 83:
      case 86:
      case 87:
      case 88:
      case 89:{
        n = unary();
{if ("" != null) return n;}
        break;
        }
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ExprNode unary() throws ParseException {ExprNode n;
    TypeNode t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 86:{
      jj_consume_token(86);
      n = unary();
{if ("" != null) return new PrefixOpNode("++", n);}
      break;
      }
    case 87:{
      jj_consume_token(87);
      n = unary();
{if ("" != null) return new PrefixOpNode("--", n);}
      break;
      }
    case 82:{
      jj_consume_token(82);
      n = term();
{if ("" != null) return new UnaryOpNode("+", n);}
      break;
      }
    case 83:{
      jj_consume_token(83);
      n = term();
{if ("" != null) return new UnaryOpNode("-", n);}
      break;
      }
    case 88:{
      jj_consume_token(88);
      n = term();
{if ("" != null) return new UnaryOpNode("!", n);}
      break;
      }
    case 89:{
      jj_consume_token(89);
      n = term();
{if ("" != null) return new UnaryOpNode("~", n);}
      break;
      }
    case 56:{
      jj_consume_token(56);
      n = term();
{if ("" != null) return new DereferenceNode(n);}
      break;
      }
    case 79:{
      jj_consume_token(79);
      n = term();
{if ("" != null) return new AddressNode(n);}
      break;
      }
    default:
      jj_la1[45] = jj_gen;
      if (jj_2_22(3)) {
        jj_consume_token(SIZEOF);
        jj_consume_token(45);
        t = type();
        jj_consume_token(47);
{if ("" != null) return new SizeofTypeNode(t, typeOf_sizeof());}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SIZEOF:{
          jj_consume_token(SIZEOF);
          n = unary();
{if ("" != null) return new SizeofExprNode(n, typeOf_sizeof());}
          break;
          }
        case STRING:
        case CHARACTER:
        case INTEGER:
        case IDENTIFIER:
        case 45:{
          n = postfix();
{if ("" != null) return n;}
          break;
          }
        default:
          jj_la1[46] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ExprNode postfix() throws ParseException {ExprNode expr, idx;
    String memb;
    List<ExprNode> args;
    expr = primary();
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 45:
      case 48:
      case 54:
      case 86:
      case 87:
      case 90:{
        ;
        break;
        }
      default:
        jj_la1[47] = jj_gen;
        break label_24;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 86:{
        jj_consume_token(86);
expr = new SuffixOpNode("++", expr);
        break;
        }
      case 87:{
        jj_consume_token(87);
expr = new SuffixOpNode("--", expr);
        break;
        }
      case 54:{
        jj_consume_token(54);
        idx = expr();
        jj_consume_token(55);
expr = new ArefNode(expr, idx);
        break;
        }
      case 48:{
        jj_consume_token(48);
        memb = name();
expr = new MemberNode(expr, memb);
        break;
        }
      case 90:{
        jj_consume_token(90);
        memb = name();
expr = new PtrMemberNode(expr, memb);
        break;
        }
      case 45:{
        jj_consume_token(45);
        args = args();
        jj_consume_token(47);
expr = new FuncallNode(expr, args);
        break;
        }
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public List<ExprNode> args() throws ParseException {List<ExprNode> argList = new ArrayList<ExprNode>();
    ExprNode arg = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRING:
    case CHARACTER:
    case SIZEOF:
    case INTEGER:
    case IDENTIFIER:
    case 45:
    case 56:
    case 79:
    case 82:
    case 83:
    case 86:
    case 87:
    case 88:
    case 89:{
      arg = expr();
argList.add(arg);
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 50:{
          ;
          break;
          }
        default:
          jj_la1[49] = jj_gen;
          break label_25;
        }
        jj_consume_token(50);
        arg = expr();
argList.add(arg);
      }
      break;
      }
    default:
      jj_la1[50] = jj_gen;
      ;
    }
{if ("" != null) return argList;}
    throw new Error("Missing return statement in function");
  }

  final public ExprNode primary() throws ParseException {Token t;
    ExprNode n;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER:{
      t = jj_consume_token(INTEGER);
{if ("" != null) return integerNode(location(t), t.image);}
      break;
      }
    case CHARACTER:{
      t = jj_consume_token(CHARACTER);
{if ("" != null) return new IntegerLiteralNode(location(t), IntegerTypeRef.charRef(), characterCode(t.image));}
      break;
      }
    case STRING:{
      t = jj_consume_token(STRING);
{if ("" != null) return new StringLiteralNode(location(t),
            new PointerTypeRef(IntegerTypeRef.charRef()),
            stringValue(t.image));}
      break;
      }
    case IDENTIFIER:{
      t = jj_consume_token(IDENTIFIER);
{if ("" != null) return new VariableNode(location(t), t.image);}
      break;
      }
    case 45:{
      jj_consume_token(45);
      n = expr();
      jj_consume_token(47);
{if ("" != null) return n;}
      break;
      }
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_3_5()
 {
    if (jj_scan_token(VOID)) return true;
    if (jj_scan_token(47)) return true;
    return false;
  }

  private boolean jj_3R_91()
 {
    if (jj_scan_token(50)) return true;
    if (jj_scan_token(51)) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_130()
 {
    if (jj_scan_token(78)) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_129()
 {
    if (jj_3R_131()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_132()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_122()
 {
    if (jj_scan_token(77)) return true;
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3R_121()
 {
    if (jj_3R_129()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_130()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_scan_token(50)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_3R_26()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_scan_token(CONST)) return true;
    return false;
  }

  private boolean jj_3R_119()
 {
    if (jj_3R_121()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_122()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_scan_token(VOID)) return true;
    if (jj_scan_token(47)) return true;
    return false;
  }

  private boolean jj_3R_128()
 {
    if (jj_scan_token(76)) return true;
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3R_127()
 {
    if (jj_scan_token(75)) return true;
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3R_126()
 {
    if (jj_scan_token(74)) return true;
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3R_125()
 {
    if (jj_scan_token(73)) return true;
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_3R_38()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_124()
 {
    if (jj_scan_token(72)) return true;
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3R_123()
 {
    if (jj_scan_token(71)) return true;
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3R_120()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_50()
 {
    if (jj_scan_token(49)) return true;
    return false;
  }

  private boolean jj_3R_89()
 {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_78()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    return false;
  }

  private boolean jj_3R_44()
 {
    if (jj_3R_33()) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_118()
 {
    if (jj_scan_token(70)) return true;
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_117()
 {
    if (jj_3R_119()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_120()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_73()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_72()
 {
    if (jj_scan_token(UNION)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_98()
 {
    if (jj_scan_token(45)) return true;
    if (jj_3R_105()) return true;
    if (jj_scan_token(47)) return true;
    return false;
  }

  private boolean jj_3R_71()
 {
    if (jj_scan_token(STRUCT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_70()
 {
    if (jj_scan_token(UNSIGNED)) return true;
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_scan_token(UNSIGNED)) return true;
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_scan_token(UNSIGNED)) return true;
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  private boolean jj_3R_116()
 {
    if (jj_scan_token(69)) return true;
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_115()
 {
    if (jj_3R_117()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_118()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_97()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_scan_token(UNSIGNED)) return true;
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3R_69()
 {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  private boolean jj_3R_68()
 {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_67()
 {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  private boolean jj_3R_66()
 {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3R_65()
 {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_96()
 {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = isType(getToken(1).image);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_73()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_95()
 {
    if (jj_scan_token(CHARACTER)) return true;
    return false;
  }

  private boolean jj_3R_113()
 {
    if (jj_3R_115()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_116()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_114()
 {
    if (jj_scan_token(68)) return true;
    if (jj_3R_105()) return true;
    if (jj_scan_token(57)) return true;
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_51()
 {
    if (jj_scan_token(50)) return true;
    return false;
  }

  private boolean jj_3R_94()
 {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_92()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_76()
 {
    if (jj_scan_token(45)) return true;
    if (jj_3R_78()) return true;
    if (jj_scan_token(47)) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_3R_33()) return true;
    if (jj_3R_36()) return true;
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_51()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(46)) return true;
    return false;
  }

  private boolean jj_3R_75()
 {
    if (jj_scan_token(56)) return true;
    return false;
  }

  private boolean jj_3R_74()
 {
    if (jj_scan_token(54)) return true;
    if (jj_scan_token(INTEGER)) return true;
    if (jj_scan_token(55)) return true;
    return false;
  }

  private boolean jj_3R_111()
 {
    if (jj_3R_113()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_scan_token(54)) return true;
    if (jj_scan_token(55)) return true;
    return false;
  }

  private boolean jj_3R_43()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_3R_42()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_43()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_64()
 {
    if (jj_scan_token(67)) return true;
    return false;
  }

  private boolean jj_3R_112()
 {
    if (jj_scan_token(50)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_110()
 {
    if (jj_3R_105()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_112()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_63()
 {
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_62()
 {
    if (jj_scan_token(65)) return true;
    return false;
  }

  private boolean jj_3R_106()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_33()) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(45)) return true;
    return false;
  }

  private boolean jj_3R_61()
 {
    if (jj_scan_token(64)) return true;
    return false;
  }

  private boolean jj_3R_60()
 {
    if (jj_scan_token(63)) return true;
    return false;
  }

  private boolean jj_3R_59()
 {
    if (jj_scan_token(62)) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_58()
 {
    if (jj_scan_token(61)) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_57()
 {
    if (jj_scan_token(60)) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_56()
 {
    if (jj_scan_token(59)) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_scan_token(58)) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_104()
 {
    if (jj_scan_token(45)) return true;
    if (jj_3R_106()) return true;
    if (jj_scan_token(47)) return true;
    return false;
  }

  private boolean jj_3R_103()
 {
    if (jj_scan_token(90)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_3R_40()) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_102()
 {
    if (jj_scan_token(48)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_101()
 {
    if (jj_scan_token(54)) return true;
    if (jj_3R_105()) return true;
    if (jj_scan_token(55)) return true;
    return false;
  }

  private boolean jj_3R_100()
 {
    if (jj_scan_token(87)) return true;
    return false;
  }

  private boolean jj_3R_99()
 {
    if (jj_scan_token(86)) return true;
    return false;
  }

  private boolean jj_3R_93()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_109()
 {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_scan_token(TYPEDEF)) return true;
    return false;
  }

  private boolean jj_3R_90()
 {
    if (jj_3R_92()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_93()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_3R_40()) return true;
    if (jj_scan_token(49)) return true;
    return false;
  }

  private boolean jj_3R_108()
 {
    if (jj_3R_40()) return true;
    if (jj_3R_41()) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_88()
 {
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_107()
 {
    if (jj_3R_40()) return true;
    if (jj_scan_token(49)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_105()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_87()
 {
    if (jj_scan_token(SIZEOF)) return true;
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_scan_token(SIZEOF)) return true;
    if (jj_scan_token(45)) return true;
    if (jj_3R_36()) return true;
    if (jj_scan_token(47)) return true;
    return false;
  }

  private boolean jj_3R_86()
 {
    if (jj_scan_token(79)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_85()
 {
    if (jj_scan_token(56)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_84()
 {
    if (jj_scan_token(89)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_83()
 {
    if (jj_scan_token(88)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_82()
 {
    if (jj_scan_token(83)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_81()
 {
    if (jj_scan_token(82)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_80()
 {
    if (jj_scan_token(87)) return true;
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_scan_token(RETURN)) return true;
    if (jj_scan_token(46)) return true;
    return false;
  }

  private boolean jj_3R_52()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_79()
 {
    if (jj_scan_token(86)) return true;
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_77()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_scan_token(45)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_144()
 {
    if (jj_scan_token(85)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_143()
 {
    if (jj_scan_token(84)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    return false;
  }

  private boolean jj_3R_53()
 {
    if (jj_scan_token(45)) return true;
    if (jj_3R_36()) return true;
    if (jj_scan_token(47)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_3R_52()) return true;
    if (jj_scan_token(57)) return true;
    return false;
  }

  private boolean jj_3R_142()
 {
    if (jj_scan_token(56)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_139()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_scan_token(UNION)) return true;
    return false;
  }

  private boolean jj_3R_135()
 {
    if (jj_3R_40()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_139()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_141()
 {
    if (jj_scan_token(83)) return true;
    if (jj_3R_135()) return true;
    return false;
  }

  private boolean jj_3R_140()
 {
    if (jj_scan_token(82)) return true;
    if (jj_3R_135()) return true;
    return false;
  }

  private boolean jj_3R_136()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) return true;
    }
    return false;
  }

  private boolean jj_3R_46()
 {
    if (jj_scan_token(STRUCT)) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_133()
 {
    if (jj_3R_135()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_136()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_scan_token(50)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_138()
 {
    if (jj_scan_token(81)) return true;
    if (jj_3R_133()) return true;
    return false;
  }

  private boolean jj_3R_137()
 {
    if (jj_scan_token(80)) return true;
    if (jj_3R_133()) return true;
    return false;
  }

  private boolean jj_3R_134()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) return true;
    }
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(EXTERN)) return true;
    if (jj_3R_26()) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(45)) return true;
    return false;
  }

  private boolean jj_3R_132()
 {
    if (jj_scan_token(79)) return true;
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_131()
 {
    if (jj_3R_133()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_134()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[52];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3600000,0x3600000,0x0,0x0,0x2600000,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,0x1f0000,0x8600000,0x0,0x50008400,0x0,0x50008400,0x80000000,0x0,0x80000000,0x50008400,0x20000000,0x8400,0x8400,0x8400,0x8400,0x0,0x8400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8400,0x0,0x8400,0x0,0x0,0x0,0x8400,0x8400,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x100,0x100,0x200,0x10000,0x100,0x20000,0x40000,0x20000,0x0,0x40000,0x1402000,0x1402000,0x0,0x0,0x40000,0x1107cfe,0x4000,0x1103cfe,0x0,0x1,0x0,0x1107cfe,0x0,0x1003c00,0x1003c00,0x1003c00,0x1003c00,0x10,0x1003c00,0xfc000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x1000000,0x1003c00,0x1000000,0x3c00,0x412000,0x412000,0x40000,0x1003c00,0x3800,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3cc8000,0x0,0x3cc8000,0x0,0x0,0x0,0x3cc8000,0x0,0x3cc8000,0x3cc8000,0x3cc8000,0x3cc8000,0x0,0x3cc8000,0xf,0x10,0x20,0x40,0x1f80,0x1f80,0x2000,0x4000,0x8000,0x30000,0x30000,0xc0000,0xc0000,0x300000,0x300000,0x3cc8000,0x3cc8000,0x0,0x4c00000,0x4c00000,0x0,0x3cc8000,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[22];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[91];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 52; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 91; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 22; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

//    static public void main(String[] sourceFiles) {
//        Dumper dp = new Dumper(new PrintStream(System.out));
//        for (String sourceFile : sourceFiles) {
//            try {
//                File file = new File("sourceCodeTest/" + sourceFile);
//                LibraryLoader libraryLoader = new LibraryLoader();
//                ErrorHandler errorHandler = new ErrorHandler(sourceFile);
//                AST ast = parseFile(file, libraryLoader, errorHandler, true);
//                ast.dump(dp);
//            } catch (Exception ex) {
////                System.err.println(ex.getMessage());
////                System.out.flush();
//                ex.printStackTrace();
//            }
//        }
//    }

}
